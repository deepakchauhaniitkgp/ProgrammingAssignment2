Reading data into R
read.table, read.csv for reading tabular data, reads text file and return dataframe in R
readLines reading any type of file into character datatype in R
source for reading r codes
dget reading r code 
load loading in saved workspace (into console)
unserialize for rading single R objects in binary form

Analogas function for writing in R 
write.table, writeLines, dump, dput, save, serialize

read.table

attributes:->
file (name of the file)
header (logical indicating if the table has a header)
sep (a string indicating how the data are separated)
colClasses (a character vector indicating the class of each column)
comment.char (a character string indicating the comment character)
nrows (the no of rows )
skip (no fo lines to be skipped from the begining)
stringsAsFactors (whwther character variables to be coded as factors)

For reading large tables use nrows to read desired no of rows
data are stored in RAM 

use of dget() and dput()
> x<-data.frame(a=1,b="a")
> x
  a b
1 1 a
> dput(x,"x.R")
> y<-dget("x.R")
> y
  a b
1 1 a

Example showing us of dump
> x<-"good"
> y<-list(a=1,b="c")
> y
$a
[1] 1

$b
[1] "c"

> x
[1] "good"
> dump(c("x","y"), file = "y.R")
> rm(x,y)
> x
Error: object 'x' not found
> y
Error: object 'y' not found
> source("y.R")
> x
[1] "good"
> y
$a
[1] 1

$b
[1] "c"

Interface to outside world
file
gzfile , for compressed file with gz algorithm
bzfile , for compressed file with bz2 algorithm
url , for connecting to the url
 
file 
> str(file)
function (description = "", open = "", blocking = TRUE, encoding = getOption("encoding"), 
    raw = FALSE, method = getOption("url.method", "default"))  
discription is the name of the file 
open = r,w,a,rb,wb,ab in last three binary mode is used 

using file 
> dir()
[1] "r_example1.csv"      "r_lecture_note.docx" "r_lecture_note.txt" 
[4] "x.R"                 "y.R"                
> connec<-file("r_example1.csv","r")
> y<-read.csv(connec)
> y
  id name marks
1  1    e    95
2  2    d    99
3  3    f    96
4  4    b   100
> close(connec)

Reading lines of a text file 
> connec<-gzfile("example2.gz")
> x<-readLines(connec,10)
> x
 [1] "a" "s" "d" "f" "f" "g" "h" "h" "j" "1"
> y<-readLines(connec)
> y
 [1] "a"  "s"  "d"  "f"  "f"  "g"  "h"  "h"  "j"  "1"  "2"  "3"  "4"  "5"  "6"  "7" 
[17] "78" "9" 
> close(connec)

Reading text from web
> x<-url("https://en.wikipedia.org/wiki/Parliament_of_India","r")
> y<-readLines(x,5)
> y
[1] "<!DOCTYPE html>"                                     
[2] "<html class=\"client-nojs\" lang=\"en\" dir=\"ltr\">"
[3] "<head>"                                              
[4] "<meta charset=\"UTF-8\"/>"                           
[5] "<title>Parliament of India - Wikipedia</title>" 

Subsetting 
Can be done by using [],[[]],$
> x<-c("a","b","s","d")
numeric indexing
> x[1]
[1] "a"
> x[2]
[1] "b"
> x[1:3]
[1] "a" "b" "s"

logical indexing
> x[x>"b"]
[1] "s" "d"
> logicalvector<-x>"a"
> logicalvector
[1] FALSE  TRUE  TRUE  TRUE
> x[logicalvector]
[1] "b" "s" "d"

subsetting a list 
> ##subsetting a list 
> x<-list(foo=1:4,bar=0.6)
> x[1]
$foo
[1] 1 2 3 4

> x[2]
$bar
[1] 0.6

> x[[1]]
[1] 1 2 3 4
> x[[2]]
[1] 0.6
> x$foo
[1] 1 2 3 4
> x$bar
[1] 0.6
> x[foo]
Error: object 'foo' not found
> x["foo"]
$foo
[1] 1 2 3 4

> x[c(1,2)]
$foo
[1] 1 2 3 4

$bar
[1] 0.6

> name<-"foo"
> x[name]
$foo
[1] 1 2 3 4

> x$name
NULL

Subsetting a matrix 
> m
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> m[1,2]
[1] 4
> m[ ,2]
[1] 4 5 6
> m[1,]
[1]  1  4  7 10
> m[1,2,drop = FALSE]
     [,1]
[1,]    4
> m[1, ,drop =FALSE]
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10

Partial Matching
> ## PARTIAL MATCHING 
> x<-list(deepak=1:10,godfather=5:12,geek=7)
> x$g
NULL
> x$d
 [1]  1  2  3  4  5  6  7  8  9 10
> x$ge
[1] 7
> x$go
[1]  5  6  7  8  9 10 11 12
> x[["d"]]
NULL
> x[["d",exact=FALSE]]
 [1]  1  2  3  4  5  6  7  8  9 10

Removing NA values from data 
by using is.na(x)
> x<-c(1,2,NA,3,4,NA,5)
> x
[1]  1  2 NA  3  4 NA  5
> bad<-is.na(x)
> x[!bad]
[1] 1 2 3 4 5
> bad
[1] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE
> x[!is.na(x)]
[1] 1 2 3 4 5
> y<-c("a","d","f",NA,"h","i")
> good<-complete.cases(x,y)
Error in complete.cases(x, y) : not all arguments have the same length
> y<-c(y,"b")
> y
[1] "a" "d" "f" NA  "h" "i" "b"
> good<-complete.cases(x,y)
> good
[1]  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE
> x[good]
[1] 1 2 4 5
> y[good]
[1] "a" "d" "h" "b"

Vectorized operation
> ##VECTORIZED OPERATION 
> x<-1:4
> y<-6:9
> x+y
[1]  7  9 11 13
> x*y
[1]  6 14 24 36
> x/y
[1] 0.1666667 0.2857143 0.3750000 0.4444444
> x.3
Error: object 'x.3' not found
> x>3
[1] FALSE FALSE FALSE  TRUE
> m1<-matrix(1:4,nrow=2,ncol=2)
> m2<-matrix(5:8,nrow=2,ncol=2)
> m1+m2
     [,1] [,2]
[1,]    6   10
[2,]    8   12
> m2-m1
     [,1] [,2]
[1,]    4    4
[2,]    4    4
> m1*m2
     [,1] [,2]
[1,]    5   21
[2,]   12   32
> m1/m2
          [,1]      [,2]
[1,] 0.2000000 0.4285714
[2,] 0.3333333 0.5000000
> m1%*%m2
     [,1] [,2]
[1,]   23   31
[2,]   34   46